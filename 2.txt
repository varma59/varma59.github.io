//polymorphisim
#include<iostream> 
using namespace std; 
class Base {
public: 
Base() { 
cout << "\nConstructor Base class";
} 
virtual ~Base() { 
cout << "\nDestructor Base class";
}
};
class Derived: public Base {
 public:
 Derived() {
 cout << "\nConstructor Derived class" ;
}
~Derived() { 
 cout << "\nDestructor Derived class";
} 
}; 
int main() {
Base *p = new Derived;
delete p;
}


//template
#include <iostream>
using namespace std;

template <class T, class U> class A {
  T x;
  U y;

public:
  A() { cout << "Constructor Called" << endl; }
};

int main()
{
  A<char, char> a;
  A<int, double> b;
  return 0;
}


//abstarct
#include<iostream>
using namespace std;
class shape {
public:
virtual void draw() = 0;
};
class Rec : public shape {
void draw(){
cout<<"drawing Rectangle\n";
}
};
class Circle : public shape {
void draw() {
cout<<"drawing Circle\n";
}
};
int main() {
Rec r;
Circle c;
shape *p1 = &r,*p2 = &c;
p1->draw();
p2->draw();
return 0;
}
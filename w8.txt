

WEEK-8

Linear Regression

1.Aim: Implement a sutiable to predict salary of a person based on the
experience

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import io
    from google.colab import files
    uploaded = files.upload()
    df = pd.read_csv(io.BytesIO(uploaded['Salary_Data.csv']))
    print(df)

    <IPython.core.display.HTML object>

    Saving Salary_Data.csv to Salary_Data.csv
        YearsExperience    Salary
    0               1.1   39343.0
    1               1.3   46205.0
    2               1.5   37731.0
    3               2.0   43525.0
    4               2.2   39891.0
    5               2.9   56642.0
    6               3.0   60150.0
    7               3.2   54445.0
    8               3.2   64445.0
    9               3.7   57189.0
    10              3.9   63218.0
    11              4.0   55794.0
    12              4.0   56957.0
    13              4.1   57081.0
    14              4.5   61111.0
    15              4.9   67938.0
    16              5.1   66029.0
    17              5.3   83088.0
    18              5.9   81363.0
    19              6.0   93940.0
    20              6.8   91738.0
    21              7.1   98273.0
    22              7.9  101302.0
    23              8.2  113812.0
    24              8.7  109431.0
    25              9.0  105582.0
    26              9.5  116969.0
    27              9.6  112635.0
    28             10.3  122391.0
    29             10.5  121872.0

Implement a suitable regression to improve salary of aperson based on
experience

    df = pd.DataFrame(data=df)

    df.plot.line(x='Salary',linestyle = '-', linewidth='3')

    plt.title('YearExperiene-VS-Salary')
    plt.show()

[]

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import io
    from google.colab import files
    uploaded = files.upload()
    df = pd.read_csv(io.BytesIO(uploaded['ins.csv']))
    print(df)

    <IPython.core.display.HTML object>

    Saving ins.csv to ins.csv
        age  buy_ins
    0    22        0
    1    40        1
    2    25        0
    3    50        1
    4    20        0
    5    21        0
    6    36        1
    7    44        0
    8    50        1
    9    48        1
    10   24        0
    11   45        1
    12   26        0

    plt.scatter(df.age, df.buy_ins, color= 'red')

    <matplotlib.collections.PathCollection at 0x7fba5c2f0810>

[]

    from sklearn.model_selection import train_test_split
    x_train, x_test, y_train, y_test= train_test_split(df[['age']], df.buy_ins, test_size=0.4)
    x_test

        age
    6    36
    3    50
    4    20
    8    50
    7    44
    12   26

    df.describe()

                 age    buy_ins
    count  13.000000  13.000000
    mean   34.692308   0.461538
    std    11.960941   0.518875
    min    20.000000   0.000000
    25%    24.000000   0.000000
    50%    36.000000   0.000000
    75%    45.000000   1.000000
    max    50.000000   1.000000

    df.corr()

                  age   buy_ins
    age      1.000000  0.817004
    buy_ins  0.817004  1.000000

3) Aim :classify 0 to 9 handwritten digits using any classifier.

    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split

    model= LogisticRegression()
    x = df.iloc[:,:-1].values
    y = df.iloc[:,1].values
    x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)
    model.fit(x_train, y_train)
    y_pred=model.predict(x_test)

    plt.scatter(x_test,y_test,color= 'red', marker='+')
    plt.scatter(x_test,y_pred,color='blue', marker='.')
    plt.xlabel("Age of person")
    plt.ylabel("Bought Insurance 1=Bought 0=Did not Buy")

    Text(0, 0.5, 'Bought Insurance 1=Bought 0=Did not Buy')

[]

    model.score(x_test,y_test)

    0.6666666666666666

    model.predict(np.array([21]).reshape((-1,1)))

    array([0])

    from sklearn import datasets, svm, metrics
    from sklearn.model_selection import train_test_split

    digits = datasets.load_digits()
    digits.images.shape

    (1797, 8, 8)

    digits = datasets.load_digits()

    import matplotlib.pyplot as plt
    plt.imshow(digits.images[-1],cmap=plt.cm.gray_r)

    <matplotlib.image.AxesImage at 0x7fba4f07ed50>

[]

    data = digits.images.reshape( (digits.images.shape[0], -1) )
    data.shape

    (1797, 64)

    clf = svm.SVC(gamma=0.001)

    X_train, X_test, y_train, y_test = train_test_split(
        data, digits.target, test_size=0.5, shuffle=False
    )

    # Learn the digits on the train subset
    clf.fit(X_train, y_train)

    # Predict the value of the digit on the test subset
    predicted = clf.predict(X_test)

    _, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 8))
    for ax, image, prediction in zip(axes, X_test, predicted):
        ax.set_axis_off()
        image = image.reshape(8, 8)
        ax.imshow(image, cmap=plt.cm.gray_r)
        ax.set_title(f"Prediction: {prediction}")

[]

    from sklearn.metrics import accuracy_score

    data = digits.images.reshape( (digits.images.shape[0], -1) )
    data.shape

    (1797, 64)

    print(
        f"Classification report for classifier {clf}:\n"
        f"{metrics.classification_report(y_test, predicted)}\n"
    )


    classifier_prediction = clf.predict(X_test)
    print(accuracy_score(y_test,classifier_prediction)*100)

    Classification report for classifier SVC(gamma=0.001):
                  precision    recall  f1-score   support

               0       1.00      0.99      0.99        88
               1       0.99      0.97      0.98        91
               2       0.99      0.99      0.99        86
               3       0.98      0.87      0.92        91
               4       0.99      0.96      0.97        92
               5       0.95      0.97      0.96        91
               6       0.99      0.99      0.99        91
               7       0.96      0.99      0.97        89
               8       0.94      1.00      0.97        88
               9       0.93      0.98      0.95        92

        accuracy                           0.97       899
       macro avg       0.97      0.97      0.97       899
    weighted avg       0.97      0.97      0.97       899


    96.88542825361512

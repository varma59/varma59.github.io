

Aim: Reading and displaying an image

    import cv2 
    from google.colab.patches import cv2_imshow
    image = cv2.imread("/content/dog.jpg")
    cv2_imshow(image)

Aim: Read a color image and convert it into gray scale

    print('Gray scale')
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)# cv2.COLOR_BGR2GRAY for gray Colour
    cv2_imshow(gray_image)

    print('RGB IMAGE')
    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)#cv2.COLOR_BGR2RGB for RGB Varient
    cv2_imshow(rgb_image)

    # Python program to explain cv2.imread() method

    # importing cv2
    import cv2
    from google.colab.patches import cv2_imshow 
    # path
    path = r'/content/dog.jpg'

    # Using cv2.imread() method
    # Using 0 to read image in grayscale mode
    img = cv2.imread(path, 100)

    # Displaying the image
    cv2_imshow(img)

AIM: Implement a program to Rotate an image by 90/270degrees clockwise
and 180degrees using opencv

     #Python program to explain cv2.rotate() method

    # importing cv2
    import cv2
    from google.colab.patches import cv2_imshow
    # path
    path = r'/content/dog.jpg'

    # Reading an image in default mode
    src = cv2.imread(path)

    # Window name in which image is displayed
    window_name = 'Image'

    # Using cv2.rotate() method
    # Using cv2.ROTATE_90_CLOCKWISE rotate
    # by 90 degrees clockwise
    image90 = cv2.rotate(src, cv2.ROTATE_90_CLOCKWISE)
    # by 180 degrees clockwise
    image180 = cv2.rotate(src, cv2.ROTATE_180)
    # by -90 counterClockwise
    image270 = cv2.rotate(src, cv2.ROTATE_90_COUNTERCLOCKWISE)

    # Displaying the image

    cv2_imshow(image90)
    print()
    cv2_imshow(image180)
    print()
    cv2_imshow(image270)

    #cv2.waitKey(0)

AIM: write a program to convert a 3 channel image into a single channel
and later combine into a 3 channel image.

    import cv2
    import numpy as np
    img = cv2.imread('/content/dog.jpg')
    from google.colab.patches import cv2_imshow
    cv2_imshow(img)

    print('                                              ')

    #split() function used to split channels wise
    b, g, r = cv2.split(img)
    blue = np.zeros_like(img)
    blue[:,:,0] = img[:,:,0]
    from google.colab.patches import cv2_imshow
    cv2_imshow(blue)

    print('                                                ')

    green = np.zeros_like(img)
    green[:,:,1] = img[:,:,1]
    from google.colab.patches import cv2_imshow
    cv2_imshow(green)

    print('                                            ')

    red = np.zeros_like(img)
    red[..., 2] = img[..., 2]
    from google.colab.patches import cv2_imshow
    cv2_imshow(red)

    print('                                                      ')


    img = cv2.merge((b,g,r))
    from google.colab.patches import cv2_imshow
    cv2_imshow(img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

AIM: implement a program for extracting image properties and to access
and modify pixel values

    import cv2
    from google.colab.patches import cv2_imshow 
    # read image 
    img = cv2.imread('/content/dog.jpg') 
    # height, width, number of channels in image 
    height = img.shape[0] 
    width = img.shape[1] 
    channels = img.shape[2] 
    size_of = img.size 
    dimensions = img.shape
    print('Image Dimensions are :',dimensions) 
    print('Image Height :',height) 
    print('Image Width : ',width) 
    print('Number of Channels : ',channels) 
    print('Image Size :', size_of)

    #This gives us the (B, G, R) tuple value of the 50th pixel in the 20th row
    (b,g,r) = img[20][50]

    print("The (B,G,R) value at 50th pixel of the 20th row is ",(b,g,r)) 

    #Now let us change pixel the value to (255,255,255)
    img[20][50] = (255,255,255)
    cv2_imshow(img)

Inference: OpenCV is a Python open-source library which is mostly used,
which is used for computer vision in Artificial intelligence, Machine
Learning, face recognition, etc. In OpenCV, the CV is an abbreviation
form of a computer vision, which is defined as a field of study that
helps computers to understand the content of the digital images such as
photographs and videos. The purpose of computer vision is to understand
the content of the images. It extracts the description from the
pictures, which may be an object, a text description, and
three-dimension model, and so on. For example, cars can be facilitated
with computer vision, which will be able to identify and different
objects around the road, such as traffic lights, pedestrians, traffic
signs, and so on, and acts accordingly. Languages where open cv is used:
OpenCV supports a wide variety of programming languages such as ** C++,
Python, Java, etc.,** and is available on different platforms including
Windows, Linux, OS X, Android, and iOS. Interfaces for high-speed GPU
operations based on CUDA and OpenCL are also under active development. I
learnt to change colours in an image and displying and converting into
greyscale and rgb and then rotating the images.

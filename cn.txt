bit(c) --
#include<stdio.h>
#include<string.h>
int main()
{
char str[50],op[50];
int i=0,j=0,n,count=0;
printf("\nenter the data (0's & 1's)\n");
gets(str);
while(str[i]!='\0')
{
if(str[i]=='1')
count++;
if(str[i]=='0')
count=0;
op[j]=str[i];
if(count==5)
{
op[j]=str[i];
j++;
op[j]='0';
count=0;
}
j++;
i++;
}
for(n=0;n<j;n++)
{
str[n]=op[n];
}
printf("\nthe stuffed op string is:\n%s\n",str);
} 
byte(c) --
#include<stdio.h>
#include<string.h>
int main()
{
char str[50],op[50];
int i=0,j=0,n,count=0;
printf("\nenter the data (char data)\n");
gets(str);
while(str[i]!='\0')
{
if(str[i]=='D')
{
i++;
if(str[i]=='L')
{
i++;
if(str[i]=='E')
{
op[j]='D';
j++;
op[j]='L';
j++;
op[j]='E';
j++;
}
i--;
}
i--;
}
op[j]=str[i];
j++;
i++;
}
for(n=0;n<(j);n++)
{
str[n]=op[n];
}
printf("\nthe stuffed op string is:\n%s\n",str);
}
dj(c)--
#include <stdio.h>
#include<conio.h>
#define infinity 999
void dij(int n,int v,int cost[10][10],int dist[])
{
int i,u,count,w,flag[10],min;
for(i=1;i<=n;i++)
{
flag[i]=0;
dist[i]=cost[v][i];
}
count=2;
while(count<=n)
{
min=99;
for(w=1;w<=n;w++)
{
if(dist[w]<min && !flag[w])
{
min=dist[w];
u=w;
}
}
flag[u]=1;
count++;
for(w=1;w<=n;w++)
{
if((dist[u]+cost[u][w]<dist[w]) && !flag[w])
{
dist[w]=dist[u]+cost[u][w];
}
}
}
}
int main()
{
int n,v,i,j,cost[10][10],dist[10];
printf("\n Enter the number of nodes:");
scanf("%d",&n);
printf("\n Enter the cost matrix:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=infinity;
}
}
printf("\n Enter the source node:");
scanf("%d",&v);
dij(n,v,cost,dist);
printf("\n Shortest path:\n");
for(i=1;i<=n;i++)
{
if(i!=v)
{
printf("%d->%d,cost=%d\n",v,i,dist[i]);
}
}
getch();
}



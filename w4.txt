

Week-4

1) Aim : Write a brief note on Numpy Library.

-> NumPy stands for Numerical python.

-> NumPy is a python library used for working with the arrays.

-> NumPy is written partially in python, but most of the parts are
written in c or c++ for quick computation.

-> The array object in NumPy is called ndarray.

-> It also has functionalities in the domain of linear algebra, fourier
transforms, and matrices.

-> The array dimension is one level of array depth (nested arrays).

        ☣ 0-D arrays, or Scalers, are the elements in an array. Each value in an array is a 0-D array.  
        ☣ An array that has 0-D arrays as its elements are called 1-D arrays.
        ☣ An array that has 1-D arrays as its elements are called 2-D arrays.
        ☣ An array that has 2-D arrays as its elements are called 3-D arrays.

-> The indexing of an array is same as accessing an element in the
array.

-> Slicing of elements can also be done in python which means retrieving
of elements from one index to other index.

-> In NumPy, There are different types of data types, they are integer,
float, string, boolean, complex.

-> The astype() function creates a copy of the array, which allows us to
specify the data type as a parameter.

2) Aim : Create a 4*3 integer array and print the shape of the array and
the length of each element.

    import numpy as np
    m = np.arange (0,12).reshape((4,3))
    print(m)

    [[ 0  1  2]
     [ 3  4  5]
     [ 6  7  8]
     [ 9 10 11]]

3) Aim : Create a 5*2 integer array from a range betwween 100 to 200
such that the difference between each element is 10.

    import numpy as np
    m = np.arange (100,200,10).reshape((5,2))
    print(m)

    [[100 110]
     [120 130]
     [140 150]
     [160 170]
     [180 190]]

4) Aim : From a 2D array of 12 elements delcared in three rows, return
an array of items by taking 3rd column of all the rows.

    import numpy as np
    arr = np.array([[11,12,13,14], [15,16,17,18], [19,20,21,22]])
    print(arr[0:3,2])

    [13 17 21]

5) Aim : Create an array by adding two numpy arrays and modify the
resultant array by calculating the square of each element

    import numpy as np
    a = np.array([11,12,13,14])
    a1 = np.array([15,16,17,18])
    a = np.reshape(a,(2,2))
    a1 = np.reshape(a1,(2,2))
    a2 = a + a1
    print(a2)
    a2 = np.square(a2)
    print(a2)

    [[26 28]
     [30 32]]
    [[ 676  784]
     [ 900 1024]]

6) Aim : Split a numpy array into five equal sized sub arrays.

    import numpy as np
    a = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
    a1 = np.array_split(a,5)
    print(a1)

    [array([1, 2, 3]), array([4, 5, 6]), array([7, 8, 9]), array([10, 11, 12]), array([13, 14, 15])]

7) Aim : Given elements [11, 12, 13, 14, 15, 16, 17, 15, 11,12, 14, 15],
create a (1) 1-D array and find maxima and minima (2) 4*3 array, find
maximum and minimum of the flattened array,maxima and minima along
axis-0 and axis-1.

    import numpy
    arr2D = numpy.array([[11, 12, 13],
    [14, 15, 16],
    [17, 15, 11],
    [12, 14, 15]])
    maxValue = numpy.amax(arr2D)
    print('max of the array:',maxValue)
    minValue = numpy.amin(arr2D)
    print('min of the array:',minValue)
    maxInColumns= numpy.amax (arr2D, axis=0)
    print('Max value of every column (along axis=0):', maxInColumns)
    minInRows = numpy.amin(arr2D, axis=1)
    print('Max value of every Row(along axis=1):', minInRows)

    max of the array: 17
    min of the array: 11
    Max value of every column (along axis=0): [17 15 16]
    Max value of every Row(along axis=1): [11 14 11 12]

8) Aim: Delete the 2nd column from the previous array and add a new
column.

    import numpy
    a = numpy.array([[1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [10, 11, 12]])
    a=numpy.delete(a,2,1)
    print(a)
    new_column=numpy.array([[14, 14, 14, 14]])
    a = numpy.insert (a, 2, new_column, axis=1)
    print(a)

    [[ 1  2]
     [ 4  5]
     [ 7  8]
     [10 11]]
    [[ 1  2 14]
     [ 4  5 14]
     [ 7  8 14]
     [10 11 14]]

Inference:

NumPy aims to provides an array object which is 50x faster than
traditional Python lists. In NumPy, the array objects are called as
ndarrays. It provudes us with many functionalities which are easy and
handy which made easier use of the ndarrays. Arrays are now customarily
used in data science, Where time and space complexities play a vital
role in today's world.

#Useful Numpy Commands:

np.linspace(start,stop,num):Returns a Numpy array of size num with
evenly spaced values between start and stop.

arr.shape:Returns a tuple of the size of each dimension in a Numpy
array.

np.zeros(arr.shape):Returns a new Numpy array of zeros of the same shape
as arr. This is great for making buffer images.

np.array(list):Turns a standard Python list into a Numpy array.

arr[start:stop:step,...,...]:Returns the portion of arr described by
standard Python slice notation. Commas separate slice notation for each
dimension. A single colon returns every element of the specified
dimension.

arr + number: Performs the element-wise addition of each element of arr
with number. This also works with subtraction(-), multiplication(*),
division(/) and others.

arr1 + arr2: Performs the element-wise addition between arr1 with arr2.
This also works with subtraction(-), multiplication(), division(/) and
others. Warning: If arr1 and arr2 are both matrices, performs a matrix
multiplication.

np.multiply(arr1,arr2):Returns the element-wise multiplication of arr1
and arr2.

np.matmul(arr1, arr2):Returns the matrix multiplication arr1 and arr2.

np.dot(arr1, arr2):Returns the dot product of arr1 and arr2. Warning:
Make sure that arr1 and arr2 are both row vectors or both column
vectors.

np.cross(arr1, arr2):Returns the cross product of arr1 and arr2.
Warning: Make sure that arr1 and arr2 are both row vectors or both
column vectors.

np.sum(arr, axis=None):Sums all elements in a Numpy array. If you
specify an axis, it will only sum along that axis.

np.atleast_2D(arr):Turns a 1D list into a 2D Numpy matrix array. arr.T
(Links to an external site.) If arr is 2D, it returns the matrix
transpose.

np.amax(arr, axis=None):Returns the maximum value of a Numpy array. If
you specify an axis, it will return each maximum value along that axis.

np.argmax(arr, axis=None):Returns the index of the maximum value of a
Numpy array. If you specify an axis, it will return the index of each
maximum value along that axis.

np.clip(arr, min, max):Returns an array where each element is between
min and max.

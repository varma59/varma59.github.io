

#Week-10

1) Aim : Write a program to save an image in a particular loaction.

    import cv2
    from google.colab.patches import cv2_imshow
    import matplotlib.pyplot as plt
    %matplotlib inline

    print("old Image : \n")
    image = cv2.imread("/content/th2.jpg")
    cv2_imshow(image)
    cv2.imwrite("New_image.jpg",image)
    print("\nUploaded Image : \n")
    Newimage = cv2.imread("/content/New_image.jpg")
    cv2_imshow(Newimage)

------------------------------------------------------------------------

2) Aim : Write a program to extract the face and eyes of the given
image.

    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_eye.xml")

    img = cv2.imread("/content/th.jpg")
    gray = cv2.imread('/content/th.jpg',0)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        image = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]
        eyes = eye_cascade.detectMultiScale(roi_gray)
        for (ex,ey,ew,eh) in eyes:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
    print("The Face and Eyes are detected : \n")
    cv2_imshow(img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

------------------------------------------------------------------------

3) Aim : Write a program to match the similar features of two images
using sift algorithm.

    img1 = cv2.imread('/content/sm1.jpg')
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)

    img2 = cv2.imread('/content/sm2.jpg') 
    img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

    sift = cv2.SIFT_create()

    figure, ax = plt.subplots(1, 2, figsize=(10, 5))

    ax[0].imshow(img1, cmap='gray')
    ax[1].imshow(img2, cmap='gray')

    keypoints_1, descriptors_1 = sift.detectAndCompute(img1,None)
    keypoints_2, descriptors_2 = sift.detectAndCompute(img2,None)

    bf = cv2.BFMatcher(cv2.NORM_L1, crossCheck=True)

    matches = bf.match(descriptors_1,descriptors_2)
    matches = sorted(matches, key = lambda x:x.distance)

    img3 = cv2.drawMatches(img1, keypoints_1, img2, keypoints_2, matches[:50], img2, flags=2)
    plt.imshow(img3)
    plt.show()

------------------------------------------------------------------------

Inference

1.  OpenCV is one of the most popular computer vision libraries. If you
    want to start your journey in the field of computer vision, then a
    thorough understanding of the concepts of OpenCV is of paramount
    importance.

2.  cv2.imshow() method is used to display an image in a window. The
    window automatically fits to the image size.

      Syntax: cv2.imshow(window_name, image)

3.  Image processing is basically signal processing in which input is an
    image and output is image or characteristics according to
    requirement associated with that image.

4.  cv2.cvtColor() method is used to convert an image from one color
    space to another.

      Syntax: cv2.cvtColor(src, code[, dst[, dstCn]])

5.  SIFT (Scale Invariant Fourier Transform) Detector is used in the
    detection of interest points on an input image. It allows
    identification of localized features in images which is essential.

6.  Unlike the Harris Detector, which is dependent on properties of the
    image such as viewpoint, depth, and scale, SIFT can perform feature
    detection independent of these properties of the image.

7.  cv2.imwrite() method is used to save an image to any storage device.
    This will save the image according to the specified format in
    current working directory.

      Syntax: cv2.imwrite(filename, image)
